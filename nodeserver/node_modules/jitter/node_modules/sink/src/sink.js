var call, q,
  __slice = Array.prototype.slice;

((typeof window !== "undefined" && window !== null) || exports).q = q = function() {
  var args, cb, func, _i;
  func = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
  (q.callbacks || (q.callbacks = [])).push(function() {
    return call(func, args, cb, function(cb, results) {
      var callbacks, _base, _ref;
      _ref = [q.callbacks, [null]], callbacks = _ref[0], q.callbacks = _ref[1];
      cb.apply(null, results);
      q.callbacks = q.callbacks.slice(1).concat(callbacks.slice(1));
      return typeof (_base = q.callbacks)[0] === "function" ? _base[0]() : void 0;
    });
  });
  if (q.callbacks.length === 1) return q.callbacks[0]();
};

q.parallel = function(body) {
  var parallel;
  parallel = function(done) {
    return body(function() {
      var args, cb, func, _i;
      func = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
      q.i = (q.i || 0) + 1;
      return call(func, args, cb, function(cb, results) {
        cb.apply(null, results);
        if (--q.i === 0) return done();
      });
    });
  };
  return q(parallel, function() {});
};

call = function(func, args, cb, body) {
  if (cb) {
    return func.apply(null, __slice.call(args).concat([function() {
      var results;
      results = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return body(cb, results);
    }]));
  } else {
    return body(func);
  }
};
